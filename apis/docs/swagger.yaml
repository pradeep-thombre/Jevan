basePath: /
definitions:
  commons.ApiErrorResponsePayload:
    properties:
      additional_info:
        additionalProperties: true
        type: object
      message:
        type: string
      status:
        type: string
    type: object
  models.Cart:
    properties:
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/models.CartItem'
        type: array
      totalprice:
        type: number
    type: object
  models.CartItem:
    properties:
      item_id:
        type: string
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  models.Order:
    properties:
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      ordered_at:
        description: Unix timestamp
        type: integer
      status:
        description: e.g., "pending", "confirmed", "delivered"
        type: string
      totalprice:
        type: number
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.OrderItem:
    properties:
      name:
        type: string
      price:
        type: number
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  models.Product:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      is_available:
        type: boolean
      name:
        type: string
      price:
        type: number
    type: object
  models.User:
    properties:
      _id:
        type: string
      age:
        type: integer
      cart_id:
        type: string
      email:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      type:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@jevan.app
    name: API Support
  description: Backend APIs for Jevan mess application using Echo.
  title: Jevan - Mess Management API
  version: "1.0"
paths:
  /cart:
    post:
      consumes:
      - application/json
      description: Creates or updates a cart with new list of items and total price
      parameters:
      - description: Cart object
        in: body
        name: cart
        required: true
        schema:
          $ref: '#/definitions/models.Cart'
      produces:
      - application/json
      responses:
        "200":
          description: Cart updated successfully
          schema:
            $ref: '#/definitions/models.Cart'
        "400":
          description: Invalid cart data
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Could not update cart
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Overwrite or add items to cart
      tags:
      - Cart
  /cart/{cartId}/item/{itemId}:
    put:
      consumes:
      - application/json
      description: Updates the quantity of a specific item in a cart, removes if quantity
        = 0
      parameters:
      - description: Cart ID
        in: path
        name: cartId
        required: true
        type: string
      - description: Item ID
        in: path
        name: itemId
        required: true
        type: string
      - description: Quantity payload
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Updated cart
          schema:
            $ref: '#/definitions/models.Cart'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update item
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update quantity of a cart item
      tags:
      - Cart
  /cart/{id}:
    get:
      consumes:
      - application/json
      description: Get items in a cart using cartId
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cart object with all items
          schema:
            $ref: '#/definitions/models.Cart'
        "400":
          description: Failed to get items from cart
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: Get all items in a cart
      tags:
      - Cart
  /cart/{id}/all:
    delete:
      consumes:
      - application/json
      description: Remove all items from the cart identified by cartId
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Failed to delete items from cart
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: Delete all items from cart
      tags:
      - Cart
  /orders:
    post:
      consumes:
      - application/json
      description: Create a new order with given details
      parameters:
      - description: Order Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: CreateOrder
      tags:
      - Order Management
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Get details of an order by its ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: GetOrderById
      tags:
      - Order Management
    put:
      consumes:
      - application/json
      description: Update an order's status or cancel the order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: UpdateOrder
      tags:
      - Order Management
  /products:
    get:
      description: Retrieves all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: Get All Products
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Creates a new product
      parameters:
      - description: Product Info
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: Create Product
      tags:
      - Product
  /products/{id}:
    delete:
      description: Deletes a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: Delete Product by ID
      tags:
      - Product
    get:
      description: Retrieves a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: Get Product by ID
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Updates an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product Info
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: Update Product
      tags:
      - Product
  /users:
    get:
      consumes:
      - application/json
      description: get details of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: GetUsers
      tags:
      - User Management
    post:
      consumes:
      - application/json
      description: Create a user with name, email, age, and is_Active status
      parameters:
      - description: User data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: CreateUser
      tags:
      - User Management
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete user details by user id
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: DeleteUserById
      tags:
      - User Management
    get:
      consumes:
      - application/json
      description: Gets user details by user id such as name, email, status etc.
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: GetUserById
      tags:
      - User Management
    patch:
      consumes:
      - application/json
      description: update user details such as name, email, age, and is_Active status
        bu user id
      parameters:
      - description: User data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.User'
      - description: User Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: UpdateUser
      tags:
      - User Management
swagger: "2.0"
