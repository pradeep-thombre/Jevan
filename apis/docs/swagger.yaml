basePath: /
definitions:
  commons.ApiErrorResponsePayload:
    properties:
      additional_info:
        additionalProperties: true
        type: object
      message:
        type: string
      status:
        type: string
    type: object
  models.CartItem:
    properties:
      item_id:
        type: string
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  models.Order:
    properties:
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      ordered_at:
        description: Unix timestamp
        type: integer
      status:
        description: e.g., "pending", "confirmed", "delivered"
        type: string
      total_price:
        type: number
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.OrderItem:
    properties:
      name:
        type: string
      price:
        type: number
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  models.Product:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      is_available:
        type: boolean
      name:
        type: string
      price:
        type: number
    type: object
host: localhost:8080
info:
  contact:
    email: support@jevan.app
    name: API Support
  description: Backend APIs for Jevan mess application using Echo.
  title: Jevan - Mess Management API
  version: "1.0"
paths:
  /cart/{id}:
    delete:
      consumes:
      - application/json
      description: Remove an item from the cart using itemId
      parameters:
      - description: Cart ID
        example: '"cart123"'
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        example: '"item456"'
        in: query
        name: itemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item deleted successfully
          schema:
            type: string
        "400":
          description: Failed to delete item
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: Delete item from cart
      tags:
      - Cart
    get:
      consumes:
      - application/json
      description: Get items in a cart using cartId
      parameters:
      - description: Cart ID
        example: '"cart123"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of items in cart
          schema:
            items:
              $ref: '#/definitions/models.CartItem'
            type: array
        "400":
          description: Failed to get items from cart
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: Get all items in a cart
      tags:
      - Cart
  /cart/{id}/all:
    delete:
      consumes:
      - application/json
      description: Remove all items from the cart identified by cartId
      parameters:
      - description: Cart ID
        example: '"cart123"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: All items deleted successfully
          schema:
            type: string
        "400":
          description: Failed to delete items from cart
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: Delete all items from cart
      tags:
      - Cart
  /cart/id:
    post:
      consumes:
      - application/json
      description: Add an item to the cart identified by cartId
      parameters:
      - description: Cart ID
        example: '"cart123"'
        in: path
        name: id
        required: true
        type: string
      - description: Item to add to cart
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.CartItem'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added item to cart
          schema:
            $ref: '#/definitions/models.CartItem'
        "400":
          description: Invalid input or failed to add item
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: Add item to cart
      tags:
      - Cart
  /orders:
    post:
      consumes:
      - application/json
      description: Create a new order with given details
      parameters:
      - description: Order Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: CreateOrder
      tags:
      - Order Management
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Get details of an order by its ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: GetOrderById
      tags:
      - Order Management
    put:
      consumes:
      - application/json
      description: Update an order's status or cancel the order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/commons.ApiErrorResponsePayload'
      summary: UpdateOrder
      tags:
      - Order Management
  /products:
    get:
      description: Retrieves all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: Get All Products
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Creates a new product
      parameters:
      - description: Product Info
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create Product
      tags:
      - Product
  /products/{id}:
    delete:
      description: Deletes a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete Product by ID
      tags:
      - Product
    get:
      description: Retrieves a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      summary: Get Product by ID
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Updates an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product Info
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update Product
      tags:
      - Product
swagger: "2.0"
